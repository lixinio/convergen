// Code generated by github.com/reedom/convergen
// DO NOT EDIT.

/* Specify the name of the generated file's package. */
package data

import (
	"strings"
	_ "strings"

	"github.com/reedom/convergen/tests/fixtures/usecase/lixinio/biz"
)

// 忽略特定字段
// 转换
// 使用成员函数, 函数名去掉前缀(ClientProvider, 就保留 ToBiz)
func (client *ClientProvider) ToBiz2(dst *biz.ClientProvider) {
	if client == nil {
		return
	}

	dst.ID = client.ID
	// skip: dst.ClientID
	dst.Uri = strings.ToLower(client.Uri)
}

// 映射并转换
// 使用成员函数, 函数名去掉前缀(ClientRedirectUri, 就保留 ToBiz)
func (client *ClientRedirectUri) ToBiz2(dst *biz.ClientRedirectUri) {
	if client == nil {
		return
	}

	dst.ID = client.ID
	dst.ClientID = client.ClientID
	dst.Uri = strings.ToUpper(client.Url)
}

// 使用成员函数, 函数名去掉前缀(Client, 就保留 ToBiz)
// 忽略字段
// 也可以这样 :conv ClientStatus Status
// 字段映射
// 调用成员函数
func (client *Client) ToBiz2(dst *biz.Client) {
	if client == nil {
		return
	}

	dst.ID = client.ID
	dst.Status = biz.ClentStatus(client.Status)
	dst.Status2 = VariadicClientStatus(client.Status2)
	dst.StatusPtr = (*biz.ClentStatus)(client.StatusPtr)
	dst.StructPtr = (*biz.StructField)(client.StructPtr)
	dst.StringPtr = (*string)(client.StringPtr)
	dst.IntPtr = (*int32)(client.IntPtr)
	dst.ClientID = client.ClientID
	// skip: dst.ClientSecret
	dst.TokenExpire = client.TokenExpire
	dst.CreateTime = client.CreateAt
	dst.UpdateTime = client.UpdateTime
	if client.Provider != nil {
		dst.Provider = client.Provider.ToBiz()
	}
	if client.Provider2 != nil {
		dst.Provider3 = client.Provider2.ToBiz()
	}
	if client.Uris != nil {
		dst.Uris = make([]*biz.ClientRedirectUri, len(client.Uris))
		for i, e := range client.Uris {
			if e != nil {
				dst.Uris[i] = e.ToBiz()
			}
		}
	}
	if client.StringSlice != nil {
		dst.StringSlice = make([]string, len(client.StringSlice))
		copy(dst.StringSlice, client.StringSlice)
	}
	dst.IntSlice2 = client.IntSlice
}

// 忽略字段
// 字段映射
// 转换
func NewClientArgFromBiz(dst *Client, src *biz.Client) (err error) {
	if src == nil {
		return
	}

	dst.ID = src.ID
	dst.Status = int8(src.Status)
	dst.Status2 = VariadicInt8(src.Status2)
	dst.StatusPtr = (*int32)(src.StatusPtr)
	dst.StructPtr = (*StructField2)(src.StructPtr)
	dst.StringPtr = (*String)(src.StringPtr)
	dst.IntPtr = (*Int32)(src.IntPtr)
	dst.ClientID = src.ClientID
	// skip: dst.ClientSecret
	dst.TokenExpire = src.TokenExpire
	dst.CreateAt = src.CreateTime
	dst.UpdateTime = src.UpdateTime.Local()
	// skip: dst.Provider
	// skip: dst.Provider2
	if src.Uris != nil {
		dst.Uris = make([]*ClientRedirectUri, len(src.Uris))
		for i, e := range src.Uris {
			dst.Uris[i] = NewClientRedirectUriFromBiz(e)
		}
	}
	if src.StringSlice != nil {
		dst.StringSlice = make([]string, len(src.StringSlice))
		copy(dst.StringSlice, src.StringSlice)
	}
	dst.IntSlice = src.IntSlice2

	return
}

// 转换
// 前置/后置检查
func NewClientArgProviderFromBiz(dst *ClientProvider, src *biz.ClientProvider) (err error) {
	err = prepareClientProvider(dst, src)
	if err != nil {
		return
	}

	if src == nil {
		return
	}

	dst.ID = src.ID
	dst.ClientID = src.ClientID
	dst.Uri = strings.ToLower(src.Uri)
	dst.InternalFlag = 123
	err = cleanUpClientProvider(dst, src)
	if err != nil {
		return
	}

	return
}

// 映射并转换
func NewClientArgRedirectUriFromBiz(dst *ClientRedirectUri, src *biz.ClientRedirectUri) {
	if src == nil {
		return
	}

	prepareEmpty(dst, src)
	dst.ID = src.ID
	dst.ClientID = src.ClientID
	dst.Url = strings.ToUpper(src.Uri)
}

// Code generated by github.com/reedom/convergen
// DO NOT EDIT.

/* Specify the name of the generated file's package. */
package data

import (
	"fmt"
	_ "strings"

	biz_alias "github.com/reedom/convergen/tests/fixtures/usecase/lixinio/biz"
	"go.lixinio.com/apis/pkg/msku"
)

type _ msku.Mask

func convID(a int) (int, error) {
	return a, nil
}

func DbPropertyMaskFromBiz(src *biz_alias.BizPropertyMask) (dst *DbPropertyMask, err error) {
	if src == nil {
		return
	}

	dst = &DbPropertyMask{}
	dst.DbID, err = convID(int(src.BizID))
	if err != nil {
		return nil, err
	}
	dst.SetDbPropertyMask(src.BizPropertyMaskA1, biz_alias.PropertyMaskA)
	dst.SetDbPropertyMask(src.BizPropertyMaskB2, biz_alias.PropertyMaskB)
	dst.SetDbPropertyMask(src.BizPropertyMaskC3, biz_alias.PropertyMaskC)
	// skip 'DbMask.MaskD'
	dst.SetDbMask(src.BizMaskA1, biz_alias.MaskA)
	dst.SetDbMask(src.BizMaskB2, biz_alias.MaskB)
	dst.SetDbMask(src.BizMaskC3, biz_alias.MaskC)

	return
}

func DbPropertyMaskFromBizWithMask(
	src *biz_alias.BizPropertyMask,
	existFn func() (*DbPropertyMask, error),
	masker msku.Mask,
) (*DbPropertyMask, msku.Mask, error) {
	dst, err := DbPropertyMaskFromBiz(src)
	if err != nil {
		return nil, nil, err
	}

	// 转换并检查是否包含mask字段
	newMasker := msku.TransferMask(masker, dst.MaskMap())
	if !newMasker.IsExist("DbMask") &&
		!newMasker.IsExist("DbPropertyMask") {
		return dst, newMasker, nil // 直接退出
	}

	// 获得已经存在的 (ctx等参数通过闭包自行解决)
	old, err := existFn()
	if err != nil {
		return nil, nil, err
	}

	// 根据fieldMask 将更新的propertyMask字段更新到老字段
	for key := range masker {
		switch key {
		case biz_alias.BizPropertyMaskQuery.BizMaskA1:
			old.SetDbMask(src.BizMaskA1, biz_alias.MaskA)
		case biz_alias.BizPropertyMaskQuery.BizMaskB2:
			old.SetDbMask(src.BizMaskB2, biz_alias.MaskB)
		case biz_alias.BizPropertyMaskQuery.BizMaskC3:
			old.SetDbMask(src.BizMaskC3, biz_alias.MaskC)
		case biz_alias.BizPropertyMaskQuery.BizPropertyMaskA1:
			old.SetDbPropertyMask(src.BizPropertyMaskA1, biz_alias.PropertyMaskA)
		case biz_alias.BizPropertyMaskQuery.BizPropertyMaskB2:
			old.SetDbPropertyMask(src.BizPropertyMaskB2, biz_alias.PropertyMaskB)
		case biz_alias.BizPropertyMaskQuery.BizPropertyMaskC3:
			old.SetDbPropertyMask(src.BizPropertyMaskC3, biz_alias.PropertyMaskC)
		}
	}

	// 回写 (combine了未更新的propertyMask bit)
	dst.DbMask = old.DbMask
	dst.DbPropertyMask = old.DbPropertyMask

	return dst, newMasker, nil
}

func (*DbPropertyMask) MaskMap() map[string]string {
	return map[string]string{
		biz_alias.BizPropertyMaskQuery.BizMaskA1:         "DbMask",
		biz_alias.BizPropertyMaskQuery.BizMaskB2:         "DbMask",
		biz_alias.BizPropertyMaskQuery.BizMaskC3:         "DbMask",
		biz_alias.BizPropertyMaskQuery.BizPropertyMaskA1: "DbPropertyMask",
		biz_alias.BizPropertyMaskQuery.BizPropertyMaskB2: "DbPropertyMask",
		biz_alias.BizPropertyMaskQuery.BizPropertyMaskC3: "DbPropertyMask",
	}
}

func DbPropertyMaskFromBizWithMaskToMap(
	src *biz_alias.BizPropertyMask,
	masker msku.Mask,
	transfer interface {
		Int64(string, int64, int64) (any, error)
		Uint64(string, uint64, uint64) (any, error)
		Int32(string, int32, int32) (any, error)
		Uint32(string, uint32, uint32) (any, error)
		Int16(string, int16, int16) (any, error)
		Uint16(string, uint16, uint16) (any, error)
		Int8(string, int8, int8) (any, error)
		Uint8(string, uint8, uint8) (any, error)
	},
) (map[string]any, error) {
	var (
		setDbMask           uint64
		unsetDbMask         uint64
		setDbPropertyMask   int64
		unsetDbPropertyMask int64
		result              = map[string]any{}
		setDbMaskFn         = func(flag bool, mask biz_alias.Mask) {
			if flag {
				setDbMask |= uint64(mask)
			} else {
				unsetDbMask |= uint64(mask)
			}
		}
		setDbPropertyMaskFn = func(flag bool, mask biz_alias.PropertyMask) {
			if flag {
				setDbPropertyMask |= int64(mask)
			} else {
				unsetDbPropertyMask |= int64(mask)
			}
		}
	)

	dst, err := DbPropertyMaskFromBiz(src)
	if err != nil {
		return nil, err
	}

	for key := range masker {
		switch key {
		case biz_alias.BizPropertyMaskQuery.BizMaskA1:
			setDbMaskFn(src.BizMaskA1, biz_alias.MaskA)
		case biz_alias.BizPropertyMaskQuery.BizMaskB2:
			setDbMaskFn(src.BizMaskB2, biz_alias.MaskB)
		case biz_alias.BizPropertyMaskQuery.BizMaskC3:
			setDbMaskFn(src.BizMaskC3, biz_alias.MaskC)
		case biz_alias.BizPropertyMaskQuery.BizPropertyMaskA1:
			setDbPropertyMaskFn(src.BizPropertyMaskA1, biz_alias.PropertyMaskA)
		case biz_alias.BizPropertyMaskQuery.BizPropertyMaskB2:
			setDbPropertyMaskFn(src.BizPropertyMaskB2, biz_alias.PropertyMaskB)
		case biz_alias.BizPropertyMaskQuery.BizPropertyMaskC3:
			setDbPropertyMaskFn(src.BizPropertyMaskC3, biz_alias.PropertyMaskC)
		}
	}

	if v, err := transfer.Uint64("DbMask", setDbMask, unsetDbMask); err != nil {
		return nil, err
	} else if v != nil {
		result["DbMask"] = v
	}

	if v, err := transfer.Int64("DbPropertyMask", setDbPropertyMask, unsetDbPropertyMask); err != nil {
		return nil, err
	} else if v != nil {
		result["DbPropertyMask"] = v
	}

	newMasker := msku.TransferMask(masker, (*DbPropertyMask)(nil).MaskMap())
	newMasker = msku.TransferMaskToCamel(newMasker)

	for key := range newMasker {
		switch key {
		case "DbID":
			result["DbID"] = dst.DbID
		case "DbMask": // skip
		case "DbPropertyMask": // skip
		default:
			return nil, fmt.Errorf("invalid mask field '%s'", key)
		}
	}

	return result, nil
}

func (dst *DbPropertyMask) SetDbMask(flag bool, mask biz_alias.Mask) {
	if flag {
		dst.DbMask |= uint64(mask)
	} else {
		dst.DbMask &= uint64(^mask)
	}
}

func (dst *DbPropertyMask) GetDbMask(mask biz_alias.Mask) bool {
	return (biz_alias.Mask(dst.DbMask) & mask) != 0
}

func (dst *DbPropertyMask) SetDbPropertyMask(flag bool, mask biz_alias.PropertyMask) {
	if flag {
		dst.DbPropertyMask |= int64(mask)
	} else {
		dst.DbPropertyMask &= int64(^mask)
	}
}

func (dst *DbPropertyMask) GetDbPropertyMask(mask biz_alias.PropertyMask) bool {
	return (biz_alias.PropertyMask(dst.DbPropertyMask) & mask) != 0
}

func (client *DbPropertyMask) ToBiz() (dst *biz_alias.BizPropertyMask) {
	if client == nil {
		return
	}

	dst = &biz_alias.BizPropertyMask{}
	dst.BizID = biz_alias.Xint(client.DbID)
	dst.BizPropertyMaskA1 = client.GetDbPropertyMask(biz_alias.PropertyMaskA)
	dst.BizPropertyMaskB2 = client.GetDbPropertyMask(biz_alias.PropertyMaskB)
	dst.BizPropertyMaskC3 = client.GetDbPropertyMask(biz_alias.PropertyMaskC)
	dst.BizMaskA1 = client.GetDbMask(biz_alias.MaskA)
	dst.BizMaskB2 = client.GetDbMask(biz_alias.MaskB)
	dst.BizMaskC3 = client.GetDbMask(biz_alias.MaskC)

	return
}
